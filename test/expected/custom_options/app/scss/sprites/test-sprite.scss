/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$box-add-name: 'box-add';
$box-add-x: 0px;
$box-add-y: 0px;
$box-add-offset-x: 0px;
$box-add-offset-y: 0px;
$box-add-width: 32px;
$box-add-height: 32px;
$box-add-total-width: 114px;
$box-add-total-height: 114px;
$box-add-image: '../../img/genrated-images/test-sprite.png';
$box-add: 0px 0px 0px 0px 32px 32px 114px 114px '../../img/genrated-images/test-sprite.png' 'box-add';
$box-remove-name: 'box-remove';
$box-remove-x: 82px;
$box-remove-y: 0px;
$box-remove-offset-x: -82px;
$box-remove-offset-y: 0px;
$box-remove-width: 32px;
$box-remove-height: 32px;
$box-remove-total-width: 114px;
$box-remove-total-height: 114px;
$box-remove-image: '../../img/genrated-images/test-sprite.png';
$box-remove: 82px 0px -82px 0px 32px 32px 114px 114px '../../img/genrated-images/test-sprite.png' 'box-remove';
$clock-name: 'clock';
$clock-x: 0px;
$clock-y: 82px;
$clock-offset-x: 0px;
$clock-offset-y: -82px;
$clock-width: 32px;
$clock-height: 32px;
$clock-total-width: 114px;
$clock-total-height: 114px;
$clock-image: '../../img/genrated-images/test-sprite.png';
$clock: 0px 82px 0px -82px 32px 32px 114px 114px '../../img/genrated-images/test-sprite.png' 'clock';
$spritesheet-width: 114px;
$spritesheet-height: 114px;
$spritesheet-image: '../../img/genrated-images/test-sprite.png';
$spritesheet-sprites: $box-add $box-remove $clock;
$spritesheet: 114px 114px '../../img/genrated-images/test-sprite.png' $spritesheet-sprites;

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
